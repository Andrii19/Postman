{
	"info": {
		"_postman_id": "8a2e8fd1-8830-41f4-9753-8e27398b4c38",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "20112399"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": "http://162.55.220.72:5005/first"
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token\r",
							"pm.environment.set(\"token\", user_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "23e3213r",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name check 1\", function () {\r",
							"   pm.expect(\"Adelina\").to.eql(jsonData.name);\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age check 1\", function () {\r",
							"   pm.expect('25').to.eql(jsonData.age);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary check 1\", function () {\r",
							"   pm.expect(1000).to.eql(jsonData.salary);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req = pm.response.json();\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name check 2\", function () {\r",
							"   pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age check 2\", function () {\r",
							"   pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary check 2\", function () {\r",
							"   pm.expect(req.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(req.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_check_1_5_year = req.salary * 4\r",
							"pm.test(\"salary_check_1_5_year\", function () {\r",
							"        pm.expect(req.family.u_salary_1_5_year).to.eql(salary_check_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Adelina",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Alex/jjd909/53180kjkWpqc522423e3213r407101evny",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5005/user_info_3"
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.response.json();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name check 1\", function () {\r",
							"   pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age check 1\", function () {\r",
							"   pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary check 1\", function () {\r",
							"   pm.expect(req.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(req.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dogs name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dogs age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dogs name check\", function () {\r",
							"   pm.expect(\"Luky\").to.eql(jsonData.family.pets.dog.name);\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check age 2\", function () {\r",
							"   pm.expect(4).to.eql(jsonData.family.pets.dog.age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Adelina",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Adelina&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Adelina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req = pm.response.json();\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name check 1\", function () {\r",
							"   pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age check 1\", function () {\r",
							"   pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 0\", function () {\r",
							"   pm.expect(req.salary[0]).to.eql(jsonData.salary[0]);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_check_2 = req.salary[0] * 2\r",
							"let salary_2 = jsonData.salary[1]\r",
							"salary_2 = Number(salary_2)\r",
							"pm.test(\"Check salary 1\", function () {\r",
							"   pm.expect(salary_2).to.eql(salary_check_2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_check_3 = req.salary[0] * 3\r",
							"let salary_3 = jsonData.salary[2]\r",
							"salary_3 = Number(salary_3)\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"   pm.expect(salary_3).to.eql(salary_check_3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"let name = jsonData.name\r",
							"pm.environment.set(\"name\", name);\r",
							"// 19. Передать в окружение переменную age\r",
							"let age = jsonData.age\r",
							"pm.environment.set(\"age\", age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"let salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(Object.values(jsonData.salary))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Adelina",
							"type": "text",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Adelina&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Adelina"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// {{salary}}\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// {{age}}\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// {{name}}\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let req = JSON.parse(JSON.stringify(request.data))\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Property 1\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Property 2\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Property 3\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Property 4\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Property 5\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Property 6\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_qa_salary = jsonData.start_qa_salary\r",
							"start_qa_salary = Number(start_qa_salary)\r",
							"req.salary = Number(req.salary)\r",
							"pm.test(\"Check salary 0\", function () {\r",
							"   pm.expect(req.salary).to.eql(start_qa_salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"qa_salary_after_6_months = Number(qa_salary_after_6_months)\r",
							"pm.test(\"Check salary 1\", function () {\r",
							"   pm.expect(req.salary * 2).to.eql(qa_salary_after_6_months);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"qa_salary_after_12_months = Number(qa_salary_after_12_months)\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"   pm.expect(req.salary * 2.7).to.eql(qa_salary_after_12_months);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"qa_salary_after_1_5_year = Number(qa_salary_after_1_5_year)\r",
							"let salary_3 = req.salary * 3.3\r",
							"\r",
							"pm.test(\"Check salary 3\", function () {\r",
							"   pm.expect(salary_3).to.eql(qa_salary_after_1_5_year);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_3_5_year = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"qa_salary_after_3_5_year = Number(qa_salary_after_3_5_year)\r",
							"let salary_4 = req.salary * 3.8\r",
							"\r",
							"pm.test(\"Check salary 4\", function () {\r",
							"   pm.expect(salary_4).to.eql(qa_salary_after_3_5_year);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 0\", function () {\r",
							"   pm.expect(req.salary).to.eql(jsonData.person.u_name[1]);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"req.age = Number(req.age)\r",
							"pm.test(\"Check age 0\", function () {\r",
							"   pm.expect(req.age).to.eql(jsonData.person.u_age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"u_salary_5_years = Number(u_salary_5_years)\r",
							"pm.test(\"Check salary 5\", function () {\r",
							"   pm.expect(req.salary * 4.2).to.eql(u_salary_5_years);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"console.log(Object.values(jsonData.person))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5005/user_info_2"
			},
			"response": []
		}
	]
}
